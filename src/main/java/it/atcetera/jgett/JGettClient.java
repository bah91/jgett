package it.atcetera.jgett;

import java.util.Date;

/**
 * Client used to interact with <a href="http://www.ge.tt" target="_blank">Ge.tt</a> services thru REST API
 * 
 * @author Gian Luca Dalla Torre <g.dallatorre@atcetera.it>
 * @version $Id$
 *
 */
public class JGettClient {
	
	/**
	 * API Key provided by Ge.tt to use its services
	 */
	private String apiKey;
	
	/**
	 * Access token obtained after authentication
	 */
	private String accessToken;
	
	/**
	 * Refresh token obtained after authentication
	 */
	private String refreshToken;
	
	/**
	 * Expiration date for this access
	 */
	private Date expirationDate;
	
	/**
	 * States if this client is authenticated against Ge.tt services
	 * @return <code>true</code> if the client is authenticated, <code>false</code> otherwise
	 */
	public boolean isAuthenticated(){
		return ((this.accessToken != null) && (this.refreshToken != null) && (this.expirationDate != null));
	}
	
	/**
	 * States if this client session over Ge.tt services is expired 
	 * @return <code>true</code> if the client is expired, <code>false</code> otherwise
	 */
	public boolean isExpired(){
		if (!this.isAuthenticated()){
			return true;
		}
		
		if (this.expirationDate == null){
			return true;
		}
		
		Date now = new Date();
		return now.after(this.expirationDate);
	}

}

/**
 * Internal class used to implement {@link StorageInfo} interface
 * 
 * @author Gian Luca Dalla Torre <g.dallatorre@atcetera.it>
 * @version $Id$
 */
class StorageInfoImpl implements StorageInfo{
	
	/**
	 * Space used by the user
	 */
	private long usedSpace = 0;
	/**
	 * Max space available by the user
	 */
	private long limitSpace = 0;
	
	/**
	 * Extra space graned to the user (already present in limitSpace)
	 */
	private long extraSpace = 0;

	@Override
	public long getUsedSpace() {
		return usedSpace;
	}

	@Override
	public long getLimitSpace() {
		return limitSpace;
	}

	@Override
	public long getExtraSpace() {
		return extraSpace;
	}

	/**
	 * Default constructor
	 * 
	 * @param usedSpace A long that represents how many bytes are used by this user
	 * @param limitSpace A long that represents how many bytes are available for this user
	 * @param extraSpace A long that represents how many bytes has been granted for this user as extra bonus space
	 */
	public StorageInfoImpl(long usedSpace, long limitSpace, long extraSpace) {
		this.usedSpace = usedSpace;
		this.limitSpace = limitSpace;
		this.extraSpace = extraSpace;
	}
	
}

/**
 * Internal class used to implement {@link UserInfo} interface.
 * 
 * @author Gian Luca Dalla Torre <g.dallatorre@atcetera.it>
 * @version $Id$
 *
 */
class UserInfoImpl implements UserInfo{
	
	/**
	 * Ge.tt unique user identification
	 */
	private String userId;
	/**
	 * Ge.tt User Full Name
	 */
	private String fullName;
	/**
	 * Ge.tt User e - mail
	 */
	private String eMail;
	/**
	 * Information on User storage
	 */
	private StorageInfo storageInfo;

	@Override
	public String getUserId() {
		return this.userId;
	}

	@Override
	public String getFullName() {
		return this.fullName;
	}

	@Override
	public String getEMail() {
		return this.eMail;
	}

	@Override
	public StorageInfo getStorageInfo() {
		return this.storageInfo;
	}

	/**
	 * Default constructor
	 * 
	 * @param userId Unique identifier generated by Ge.tt
	 * @param fullName Ge.tt User full name
	 * @param eMail Ge.tt User associated email
	 * @param storageInfo Storage information about this user
	 */
	public UserInfoImpl(String userId, String fullName, String eMail,
			StorageInfo storageInfo) {
		this.userId = userId;
		this.fullName = fullName;
		this.eMail = eMail;
		this.storageInfo = storageInfo;
	}
	
}
